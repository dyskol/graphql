{"mappings":"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","sources":["<anon>","index.js","router/Router.js","src/loginPage.js","src/mainPage.js"],"sourcesContent":["class $51a386bc7107579e$var$Router {\n    routes = [];\n    mode = null;\n    root = \"/\";\n    constructor(options){\n        this.mode = window.history.pushState ? \"history\" : \"hash\";\n        if (options.mode) this.mode = options.mode;\n        if (options.root) this.root = options.root;\n        this.listen();\n    }\n    add = (path, cb)=>{\n        this.routes.push({\n            path: path,\n            cb: cb\n        });\n        return this;\n    };\n    remove = (path)=>{\n        for(let i = 0; i < this.routes.length; i += 1)if (this.routes[i].path === path) {\n            this.routes.slice(i, 1);\n            return this;\n        }\n        return this;\n    };\n    flush = ()=>{\n        this.routes = [];\n        return this;\n    };\n    clearSlashes = (path)=>path.toString().replace(/\\/$/, \"\").replace(/^\\//, \"\");\n    getFragment = ()=>{\n        let fragment = \"\";\n        if (this.mode === \"history\") {\n            fragment = this.clearSlashes(decodeURI(window.location.pathname + window.location.search));\n            fragment = fragment.replace(/\\?(.*)$/, \"\");\n            fragment = this.root !== \"/\" ? fragment.replace(this.root, \"\") : fragment;\n        } else {\n            const match = window.location.href.match(/(.*)$/);\n            fragment = match ? match[1] : \"\";\n        }\n        return this.clearSlashes(fragment);\n    };\n    navigate = (path = \"\")=>{\n        if (this.mode === \"history\") window.history.pushState(null, null, this.root + this.clearSlashes(path));\n        else window.location.href = `${window.location.href.replace(/(.*)$/, \"\")}${path}`;\n        return this;\n    };\n    listen = ()=>{\n        clearInterval(this.interval);\n        this.interval = setInterval(this.interval, 50);\n    };\n    interval = ()=>{\n        if (this.current === this.getFragment()) return;\n        this.current = this.getFragment();\n        this.routes.some((route)=>{\n            const match = this.current.match(route.path);\n            if (match) {\n                match.shift();\n                route.cb.apply({}, match);\n                return match;\n            }\n            return false;\n        });\n    };\n}\nvar $51a386bc7107579e$export$2e2bcd8739ae039 = $51a386bc7107579e$var$Router;\n\n\n\nasync function $73a61e65ff779447$export$bb398f9cbb2bdc79(router) {\n    const JWToken = sessionStorage.getItem(\"JWToken\");\n    // if (JWToken === null || JWToken === undefined) {\n    //     router.navigate('/login')\n    //     return\n    // }\n    const response = await fetch(\"https://01.kood.tech/api/graphql-engine/v1/graphql\", {\n        method: \"POST\",\n        headers: {\n            \"Authorization\": `Bearer ${JWToken}`,\n            \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n            query: `\r\n            {\r\n                user{\r\n                    id\r\n                    login\r\n                    profile\r\n                    attrs\r\n                    totalUp\r\n                    totalDown\r\n                    transactions(order_by: { createdAt: desc }) {\r\n                        id\r\n                        type\r\n                        amount\r\n                        createdAt\r\n                        path\r\n                    }\r\n                }\r\n            }\r\n            \r\n            `\n        })\n    });\n    const resp = await response.json();\n    const user = resp.data.user;\n    $73a61e65ff779447$var$usersData(user[0]);\n    let logout = document.getElementById(\"logout\");\n    logout.addEventListener(\"click\", function() {\n        let JWToken = sessionStorage.getItem(\"JWToken\");\n        if (JWToken != null && JWToken != undefined) {\n            sessionStorage.clear();\n            (0, $18b385bfa5aff1e0$export$fb614e1a95434ae)(router);\n        }\n    });\n}\nfunction $73a61e65ff779447$var$usersData(user) {\n    let app = document.getElementById(\"app\");\n    let header = document.createElement(\"h1\");\n    app.innerHTML = \"\";\n    header.className = \"main_header\";\n    header.innerHTML = \"GRAPHQL\";\n    app.append(header);\n    let container = document.createElement(\"div\");\n    container.className = \"container\";\n    container.style.marginTop = \"2%\";\n    app.append(container);\n    //user information\n    let basicInformationBlock = document.createElement(\"div\");\n    basicInformationBlock.className = \"basicInformationBlock\";\n    container.append(basicInformationBlock);\n    const currLevelElement = user.transactions.filter((element)=>element.type === \"level\" && !element.path.includes(\"piscine\") && !element.path.includes(\"rust\")).reduce((prevElement, currentElement)=>{\n        return currentElement.amount > prevElement.amount ? currentElement : prevElement;\n    });\n    const path = currLevelElement.path.split(\"/\").reverse()[0];\n    basicInformationBlock.innerHTML = `\r\n         <h1>Welcome, ${user.attrs.firstName} ${user.attrs.lastName}</h1>\r\n         <p>${user.attrs.email}</p><p>${user.login}</p>\r\n         <p>Level: ${currLevelElement.amount}</p>\r\n         <p>Last completed task: ${path}</p>\r\n         <button id=\"logout\" style=\"margin-left:0;\">Logout</button>\r\n        \r\n    `;\n    //audits \n    let studentAuditsCont = document.createElement(\"div\");\n    studentAuditsCont.className = \"auditsInformationCharts\";\n    let AuditRatioLb = document.createElement(\"p\");\n    AuditRatioLb.innerHTML = `Audits ratio`;\n    let userAuditRatio = document.createElement(\"p\");\n    let auditR = Math.round(user.totalUp / user.totalDown * 10) / 10;\n    console.log(auditR);\n    auditR > 0.4 ? userAuditRatio.innerHTML = `${auditR} Almost perfect!` : userAuditRatio.innerHTML = `${auditR} You are careful buddy.`;\n    auditR > 0.4 ? userAuditRatio.style.color = \"hsl(170, 100%, 50%)\" : userAuditRatio.style.color = \"hsl(340, 100%, 50%)\";\n    let auditGraphCont = document.createElement(\"div\");\n    auditGraphCont.style.width = \"100%\";\n    auditGraphCont.append($73a61e65ff779447$var$generateAuditRateGraph([\n        $73a61e65ff779447$var$convertBytesToSize(user.totalUp, \"MB\").amount,\n        $73a61e65ff779447$var$convertBytesToSize(user.totalDown, \"MB\").amount\n    ]));\n    studentAuditsCont.append(AuditRatioLb, auditGraphCont, userAuditRatio);\n    //XPAmount\n    const xps = user.transactions.filter((element)=>element.type === \"xp\" && !element.path.includes(\"piscine\") && !element.path.includes(\"rust\"));\n    const sum = $73a61e65ff779447$var$convertBytesToSize(xps.reduce((total, element)=>total + element.amount, 0));\n    let studentXpCont = document.createElement(\"div\");\n    studentXpCont.className = \"xpcount\";\n    let userXPAmount = document.createElement(\"p\");\n    userXPAmount.innerHTML = `XP ${sum.amount} ${sum.size}`;\n    let graphCont = document.createElement(\"div\");\n    graphCont.className = \"graph-container\";\n    graphCont.append($73a61e65ff779447$var$generateXPProgressGraph(xps));\n    studentXpCont.append(userXPAmount, graphCont);\n    container.append(studentAuditsCont, studentXpCont);\n}\nfunction $73a61e65ff779447$var$generateAuditRateGraph(audits) {\n    var canvas = document.createElement(\"canvas\");\n    canvas.setAttribute(\"id\", \"audit-chart\");\n    var verticalLineData = [\n        \"done\",\n        \"received\"\n    ]; // Data for the chart\n    verticalLineData.forEach((el, i)=>{\n        verticalLineData[i] = `${el}: ${audits[i]} MB`;\n    });\n    console.log(verticalLineData);\n    console.log(audits);\n    var horizontalBarChart = new Chart(canvas, {\n        type: \"bar\",\n        data: {\n            labels: verticalLineData,\n            datasets: [\n                {\n                    data: audits,\n                    backgroundColor: [\n                        \"hsl(170, 100%, 50%)\",\n                        \"hsl(0, 0%, 80%)\"\n                    ]\n                }\n            ]\n        },\n        options: {\n            indexAxis: \"y\",\n            responsive: true,\n            aspectRatio: 4,\n            plugins: {\n                legend: {\n                    display: false\n                },\n                tooltip: {\n                    callbacks: {\n                        label: function(context) {\n                            let dataIndex = context.dataIndex;\n                            let value = audits[dataIndex];\n                            let label = verticalLineData[dataIndex];\n                            return `${value} MB`;\n                        }\n                    }\n                }\n            },\n            scales: {\n                x: {\n                    display: false,\n                    beginAtZero: true // Start the X-axis at 0\n                },\n                y: {\n                    position: \"right\",\n                    grid: {\n                        display: false // Hide the y-axis grid lines\n                    }\n                }\n            },\n            datasets: {\n                bar: {\n                    barThickness: 10 // Adjust the height of the bars\n                }\n            }\n        }\n    });\n    return canvas;\n}\nfunction $73a61e65ff779447$var$generateXPProgressGraph(xps) {\n    let XPprogressChart = document.createElement(\"canvas\");\n    XPprogressChart.setAttribute(\"id\", \"chart\");\n    var xpData = xps.map(function(entity) {\n        return {\n            date: new Date(entity.createdAt),\n            xp: entity.amount,\n            task: entity.path.split(\"/\")[entity.path.split(\"/\").length - 1]\n        };\n    });\n    // Sort the XP data by date in ascending order\n    xpData.sort(function(a, b) {\n        return a.date - b.date;\n    });\n    for(let i = 1; i < xpData.length; i++)xpData[i].xp += xpData[i - 1].xp;\n    var labels = xpData.map(function(data) {\n        return data.date.toLocaleDateString();\n    });\n    var data = xpData.map(function(data) {\n        return $73a61e65ff779447$var$convertBytesToSize(data.xp, \"KB\").amount;\n    });\n    var myChart = new Chart(XPprogressChart, {\n        type: \"line\",\n        data: {\n            labels: labels,\n            datasets: [\n                {\n                    label: \"XP Earned\",\n                    data: data,\n                    fill: false,\n                    borderColor: \"hsl(260, 100%, 80%)\",\n                    pointBackgroundColor: \"black\"\n                }\n            ]\n        },\n        options: {\n            responsive: true,\n            maintainAspectRatio: false,\n            aspectRatio: 1,\n            scales: {\n                y: {\n                    beginAtZero: true // Start the Y-axis at 0\n                }\n            },\n            plugins: {\n                legend: {\n                    display: false // Hide the legend\n                },\n                tooltip: {\n                    callbacks: {\n                        label: function(context) {\n                            var dataIndex = context.dataIndex;\n                            var tooltipLabel = data[dataIndex];\n                            var taskLabel = xpData[dataIndex].task;\n                            return `Amount: ${tooltipLabel}\\nTask: ${taskLabel}`;\n                        }\n                    }\n                }\n            }\n        }\n    });\n    return XPprogressChart;\n}\nfunction $73a61e65ff779447$var$convertBytesToSize(bytes, size) {\n    const sizes = [\n        \"Bytes\",\n        \"KB\",\n        \"MB\"\n    ];\n    if (bytes === 0) return \"0 Byte\";\n    var i = -1;\n    size != null ? i = sizes.indexOf(size) : i = Math.floor(Math.log(bytes) / Math.log(1000));\n    const convertedValue = parseFloat((bytes / Math.pow(1000, i)).toFixed(2));\n    return {\n        amount: convertedValue,\n        size: sizes[i]\n    };\n}\n\n\nfunction $18b385bfa5aff1e0$export$fb614e1a95434ae(router) {\n    let JWToken = sessionStorage.getItem(\"JWToken\");\n    if (JWToken != null && JWToken != undefined) {\n        (0, $73a61e65ff779447$export$bb398f9cbb2bdc79)(router);\n        return;\n    }\n    let app = document.getElementById(\"app\");\n    app.innerHTML = \"\";\n    let container = document.createElement(\"div\");\n    container.className = \"container\";\n    app.append(container);\n    let content = document.createElement(\"div\");\n    content.className = \"content\";\n    container.append(content);\n    let title = document.createElement(\"h2\");\n    title.innerHTML = \"Login\";\n    content.append(title);\n    let form = document.createElement(\"form\");\n    form.id = \"loginForm\";\n    content.append(form);\n    let username = document.createElement(\"input\");\n    username.type = \"text\";\n    username.name = \"username\";\n    username.required = true;\n    username.placeholder = \"Enter your username\";\n    let password = document.createElement(\"input\");\n    password.type = \"password\";\n    password.name = \"password\";\n    password.required = true;\n    password.placeholder = \"Enter your password\";\n    let button = document.createElement(\"button\");\n    button.type = \"submit\";\n    button.name = \"username\";\n    button.innerHTML = \"submit\";\n    form.append(username, password, button);\n    form.addEventListener(\"submit\", async function(e) {\n        e.preventDefault();\n        const cred = btoa(`${username.value}:${password.value}`);\n        const response = await fetch(\"https://01.kood.tech/api/auth/signin\", {\n            method: \"POST\",\n            headers: {\n                \"Authorization\": `Basic ${cred}`\n            }\n        });\n        if (response.ok) {\n            const data = await response.json();\n            sessionStorage.setItem(\"JWToken\", data);\n            (0, $73a61e65ff779447$export$bb398f9cbb2bdc79)(router);\n        } else response.status === 403 ? (alert(\"Incorrect password\"), password.value = \"\") : (alert(\"User doesnt exist\"), form.reset());\n    });\n}\n\n\n\nconst $dad545c909cfec2d$var$router = new (0, $51a386bc7107579e$export$2e2bcd8739ae039)({\n    mode: \"hash\",\n    root: \"/\"\n});\n$dad545c909cfec2d$var$router.add(\"\", ()=>{\n    const JWToken = sessionStorage.getItem(\"JWToken\");\n    if (JWToken === null || JWToken === undefined) {\n        (0, $18b385bfa5aff1e0$export$fb614e1a95434ae)($dad545c909cfec2d$var$router);\n        return;\n    }\n    (0, $73a61e65ff779447$export$bb398f9cbb2bdc79)($dad545c909cfec2d$var$router);\n});\n\n\n//# sourceMappingURL=index.07ca3c87.js.map\n","import Router from './router/Router';\r\nimport { loginPage } from './src/loginPage';\r\nimport { mainPage } from './src/mainPage';\r\n\r\nconst router = new Router({\r\n  mode: 'hash',\r\n  root: '/'\r\n});\r\n\r\nrouter\r\n  .add('', () => {\r\n    const JWToken = sessionStorage.getItem('JWToken');\r\n    if (JWToken === null || JWToken === undefined) {\r\n      loginPage(router)\r\n      return\r\n    }\r\n    mainPage(router)\r\n  })","class Router {\r\n  routes = [];\r\n\r\n  mode = null;\r\n\r\n  root = '/';\r\n\r\n  constructor(options) {\r\n    this.mode = window.history.pushState ? 'history' : 'hash';\r\n    if (options.mode) this.mode = options.mode;\r\n    if (options.root) this.root = options.root;\r\n    this.listen();\r\n  }\r\n\r\n  add = (path, cb) => {\r\n    this.routes.push({ path, cb });\r\n    return this;\r\n  };\r\n\r\n  remove = path => {\r\n    for (let i = 0; i < this.routes.length; i += 1) {\r\n      if (this.routes[i].path === path) {\r\n        this.routes.slice(i, 1);\r\n        return this;\r\n      }\r\n    }\r\n    return this;\r\n  };\r\n\r\n  flush = () => {\r\n    this.routes = [];\r\n    return this;\r\n  };\r\n\r\n  clearSlashes = path =>\r\n    path\r\n      .toString()\r\n      .replace(/\\/$/, '')\r\n      .replace(/^\\//, '');\r\n\r\n  getFragment = () => {\r\n    let fragment = '';\r\n    if (this.mode === 'history') {\r\n      fragment = this.clearSlashes(decodeURI(window.location.pathname + window.location.search));\r\n      fragment = fragment.replace(/\\?(.*)$/, '');\r\n      fragment = this.root !== '/' ? fragment.replace(this.root, '') : fragment;\r\n    } else {\r\n      const match = window.location.href.match(/(.*)$/);\r\n      fragment = match ? match[1] : '';\r\n    }\r\n    return this.clearSlashes(fragment);\r\n  };\r\n\r\n  navigate = (path = '') => {\r\n    if (this.mode === 'history') {\r\n      window.history.pushState(null, null, this.root + this.clearSlashes(path));\r\n    } else {\r\n      window.location.href = `${window.location.href.replace(/(.*)$/, '')}${path}`;\r\n    }\r\n    return this;\r\n  };\r\n\r\n  listen = () => {\r\n    clearInterval(this.interval);\r\n    this.interval = setInterval(this.interval, 50);\r\n  };\r\n\r\n  interval = () => {\r\n    if (this.current === this.getFragment()) return;\r\n    this.current = this.getFragment();\r\n\r\n    this.routes.some(route => {\r\n      const match = this.current.match(route.path);\r\n      if (match) {\r\n        match.shift();\r\n        route.cb.apply({}, match);\r\n        return match;\r\n      }\r\n      return false;\r\n    });\r\n  };\r\n}\r\n\r\nexport default Router;\r\n","import { mainPage } from './mainPage.js';\r\n\r\nexport function loginPage(router){\r\n    let JWToken = sessionStorage.getItem('JWToken')\r\n    if (JWToken != null && JWToken != undefined){\r\n        mainPage(router)\r\n        return\r\n    }\r\n    let app = document.getElementById(\"app\")\r\n    app.innerHTML = \"\"\r\n    \r\n    \r\n\r\n    let container = document.createElement('div')\r\n    container.className = \"container\"\r\n    app.append(container)\r\n\r\n    let content = document.createElement('div')\r\n    content.className = \"content\"\r\n    container.append(content)\r\n\r\n    let title = document.createElement(\"h2\")\r\n    title.innerHTML = \"Login\"\r\n    content.append(title)\r\n\r\n    let form = document.createElement(\"form\")\r\n    form.id = \"loginForm\"\r\n    content.append(form)\r\n    \r\n    let username = document.createElement(\"input\")\r\n    username.type = \"text\"\r\n    username.name = \"username\"\r\n    username.required = true\r\n    username.placeholder = \"Enter your username\"\r\n\r\n    let password = document.createElement(\"input\")\r\n    password.type = \"password\"\r\n    password.name = \"password\"\r\n    password.required = true\r\n    password.placeholder = \"Enter your password\"\r\n\r\n    let button = document.createElement(\"button\")\r\n    button.type = \"submit\"\r\n    button.name = \"username\"\r\n    button.innerHTML = \"submit\"\r\n\r\n    form.append(username,password,button)\r\n\r\n    form.addEventListener(\"submit\", async function(e){\r\n        e.preventDefault();\r\n        const cred = btoa(`${username.value}:${password.value}`)\r\n\r\n        const response = await fetch('https://01.kood.tech/api/auth/signin',{\r\n            method:'POST',\r\n            headers:{\r\n                'Authorization': `Basic ${cred}`\r\n            }\r\n        });\r\n\r\n        if(response.ok){\r\n            const data = await response.json();\r\n            sessionStorage.setItem(\"JWToken\",data);\r\n            mainPage(router)\r\n        }else{\r\n            \r\n            (response.status === 403 ? (alert('Incorrect password'),password.value = '') : (alert('User doesnt exist'),form.reset()))\r\n        }\r\n    })\r\n\r\n    \r\n}","import {loginPage} from \"./loginPage\";\r\n\r\nexport async function mainPage(router){\r\n    \r\n    const JWToken = sessionStorage.getItem('JWToken');\r\n    // if (JWToken === null || JWToken === undefined) {\r\n    //     router.navigate('/login')\r\n    //     return\r\n    // }\r\n\r\n    const response = await fetch(\"https://01.kood.tech/api/graphql-engine/v1/graphql\",{\r\n        method: \"POST\",\r\n        headers: {\r\n            'Authorization': `Bearer ${JWToken}`,\r\n            'Content-Type': 'application/json'\r\n        },\r\n        body: JSON.stringify({\r\n            query:`\r\n            {\r\n                user{\r\n                    id\r\n                    login\r\n                    profile\r\n                    attrs\r\n                    totalUp\r\n                    totalDown\r\n                    transactions(order_by: { createdAt: desc }) {\r\n                        id\r\n                        type\r\n                        amount\r\n                        createdAt\r\n                        path\r\n                    }\r\n                }\r\n            }\r\n            \r\n            `\r\n        })\r\n    });\r\n    \r\n    const resp = await response.json()\r\n\r\n    const user = resp.data.user\r\n\r\n    usersData(user[0])\r\n    let logout = document.getElementById(\"logout\")\r\n    logout.addEventListener(\"click\", function(){\r\n        let JWToken = sessionStorage.getItem(\"JWToken\")\r\n        if (JWToken != null && JWToken != undefined) {\r\n            sessionStorage.clear();\r\n            loginPage(router)\r\n        }\r\n    })\r\n\r\n}\r\n\r\nfunction usersData(user){\r\n    let app = document.getElementById(\"app\")\r\n    let header = document.createElement(\"h1\")\r\n    app.innerHTML = \"\"\r\n    header.className = \"main_header\"\r\n    header.innerHTML = \"GRAPHQL\"\r\n\r\n    app.append(header)\r\n    let container = document.createElement(\"div\")\r\n    container.className = \"container\"\r\n    container.style.marginTop = 2+'%'\r\n    app.append(container)\r\n\r\n    //user information\r\n    let basicInformationBlock = document.createElement(\"div\")\r\n    basicInformationBlock.className = \"basicInformationBlock\"\r\n    container.append(basicInformationBlock)\r\n    \r\n    const currLevelElement = user.transactions\r\n        .filter(element => element.type === \"level\" && !element.path.includes(\"piscine\") && !element.path.includes(\"rust\"))\r\n        .reduce((prevElement, currentElement) => {\r\n            return currentElement.amount > prevElement.amount ? currentElement : prevElement;\r\n    });\r\n\r\n    const path = currLevelElement.path.split(\"/\").reverse()[0]\r\n\r\n    basicInformationBlock.innerHTML = `\r\n         <h1>Welcome, ${user.attrs.firstName} ${user.attrs.lastName}</h1>\r\n         <p>${user.attrs.email}</p><p>${user.login}</p>\r\n         <p>Level: ${currLevelElement.amount}</p>\r\n         <p>Last completed task: ${path}</p>\r\n         <button id=\"logout\" style=\"margin-left:0;\">Logout</button>\r\n        \r\n    `\r\n\r\n    \r\n\r\n    //audits \r\n    let studentAuditsCont = document.createElement('div')\r\n    studentAuditsCont.className = 'auditsInformationCharts'\r\n    let AuditRatioLb = document.createElement('p')\r\n    AuditRatioLb.innerHTML = `Audits ratio`\r\n    let userAuditRatio = document.createElement('p')\r\n    let auditR = Math.round((user.totalUp / user.totalDown) * 10) / 10\r\n    console.log(auditR)\r\n    auditR > 0.4 ? userAuditRatio.innerHTML = `${auditR} Almost perfect!` : userAuditRatio.innerHTML = `${auditR} You are careful buddy.`\r\n    auditR > 0.4 ? userAuditRatio.style.color = 'hsl(170, 100%, 50%)' : userAuditRatio.style.color = 'hsl(340, 100%, 50%)'\r\n    let auditGraphCont = document.createElement('div')\r\n    auditGraphCont.style.width = '100%'\r\n    auditGraphCont.append(generateAuditRateGraph([convertBytesToSize(user.totalUp, \"MB\").amount, convertBytesToSize(user.totalDown, \"MB\").amount]))\r\n    studentAuditsCont.append(AuditRatioLb, auditGraphCont, userAuditRatio)\r\n\r\n    \r\n\r\n    //XPAmount\r\n    const xps = user.transactions.filter(element => element.type === \"xp\" && !element.path.includes(\"piscine\") && !element.path.includes(\"rust\"));\r\n    const sum = convertBytesToSize(xps.reduce((total, element) => total + element.amount, 0));\r\n    \r\n\r\n    let studentXpCont = document.createElement('div')\r\n    studentXpCont.className = 'xpcount'\r\n    let userXPAmount = document.createElement('p')\r\n    userXPAmount.innerHTML = `XP ${sum.amount} ${sum.size}`\r\n    let graphCont = document.createElement('div')\r\n    graphCont.className = 'graph-container'\r\n    graphCont.append(generateXPProgressGraph(xps))\r\n    studentXpCont.append(userXPAmount, graphCont)\r\n    \r\n\r\n    container.append(studentAuditsCont,studentXpCont)\r\n\r\n    \r\n\r\n    \r\n}\r\n\r\n\r\nfunction generateAuditRateGraph(audits) {\r\n    var canvas = document.createElement('canvas');\r\n    canvas.setAttribute('id', 'audit-chart');\r\n    var verticalLineData = ['done', 'received'];// Data for the chart\r\n    verticalLineData.forEach((el, i) => {\r\n        verticalLineData[i] = `${el}: ${audits[i]} MB`;\r\n    });\r\n    console.log(verticalLineData)\r\n    console.log(audits)\r\n    var horizontalBarChart = new Chart(canvas, {\r\n        type: 'bar',\r\n        data: {\r\n            labels: verticalLineData,\r\n            datasets: [{\r\n                data: audits,\r\n                backgroundColor: [\r\n                    'hsl(170, 100%, 50%)', // first bar\r\n                    'hsl(0, 0%, 80%)', // second bar\r\n                ]\r\n            }]\r\n        },\r\n        options: {\r\n            indexAxis: 'y', // Rotate the chart to horizontal layout\r\n            responsive: true, // Make the chart responsive\r\n            aspectRatio: 4,\r\n            plugins: {\r\n                legend: {\r\n                    display: false \r\n                },\r\n                tooltip: {\r\n                    callbacks: {\r\n                        label: function (context) {\r\n                            let dataIndex = context.dataIndex;\r\n                            let value = audits[dataIndex];\r\n                            let label = verticalLineData[dataIndex];\r\n                            return `${value} MB`;\r\n                        }\r\n                    }\r\n                }\r\n            },\r\n            scales: {\r\n                x: {\r\n                    display: false, \r\n                    beginAtZero: true // Start the X-axis at 0\r\n                },\r\n                y: {\r\n                    position: 'right',\r\n                    grid: {\r\n                        display: false // Hide the y-axis grid lines\r\n                    }\r\n                }\r\n            },\r\n            datasets: {\r\n                bar: {\r\n                    barThickness: 10 // Adjust the height of the bars\r\n                }\r\n            }\r\n        }\r\n    });\r\n    return canvas\r\n}\r\n\r\nfunction generateXPProgressGraph(xps) {\r\n    let XPprogressChart = document.createElement('canvas');\r\n    XPprogressChart.setAttribute('id', 'chart');\r\n    var xpData = xps.map(function (entity) {\r\n        return {\r\n            date: new Date(entity.createdAt),\r\n            xp: entity.amount,\r\n            task: entity.path.split('/')[entity.path.split('/').length - 1]\r\n        };\r\n    });\r\n    // Sort the XP data by date in ascending order\r\n    xpData.sort(function (a, b) {\r\n        return a.date - b.date;\r\n    });\r\n    for (let i = 1; i < xpData.length; i++) {\r\n        xpData[i].xp += xpData[i - 1].xp;\r\n    }\r\n    var labels = xpData.map(function (data) {\r\n        return data.date.toLocaleDateString(); \r\n    });\r\n    var data = xpData.map(function (data) {\r\n        return convertBytesToSize(data.xp, \"KB\").amount;\r\n    });\r\n    var myChart = new Chart(XPprogressChart, {\r\n        type: 'line', \r\n        data: {\r\n            labels: labels, \r\n            datasets: [{\r\n                label: 'XP Earned', // Label for the dataset\r\n                data: data, // Y-axis data (XP amounts)\r\n                fill: false, \r\n                borderColor: 'hsl(260, 100%, 80%)',\r\n                pointBackgroundColor: 'black',\r\n            }]\r\n        },\r\n        options: {\r\n            responsive: true, // Enable responsiveness\r\n            maintainAspectRatio: false,\r\n            aspectRatio: 1,\r\n            scales: {\r\n                y: {\r\n                    beginAtZero: true // Start the Y-axis at 0\r\n                }\r\n            },\r\n            plugins: {\r\n                legend: {\r\n                    display: false // Hide the legend\r\n                },\r\n                tooltip: {\r\n                    callbacks: {\r\n                        label: function (context) {\r\n                            var dataIndex = context.dataIndex;\r\n                            var tooltipLabel = data[dataIndex];\r\n                            var taskLabel = xpData[dataIndex].task;\r\n                            return `Amount: ${tooltipLabel}\\nTask: ${taskLabel}`;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    });\r\n    return XPprogressChart\r\n}\r\n\r\nfunction convertBytesToSize(bytes, size) {\r\n    const sizes = [\"Bytes\", \"KB\", \"MB\"];\r\n    if (bytes === 0) {\r\n        return \"0 Byte\";\r\n    }\r\n    var i = -1\r\n    size != null ? i = sizes.indexOf(size) : i = Math.floor(Math.log(bytes) / Math.log(1000))\r\n    const convertedValue = parseFloat((bytes / Math.pow(1000, i)).toFixed(2));\r\n    return {\r\n        amount: convertedValue,\r\n        size: sizes[i]\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n"],"names":["$51a386bc7107579e$export$2e2bcd8739ae039","routes","mode","root","constructor","options","window","history","pushState","listen","add","path","cb","push","remove","i","length","slice","flush","clearSlashes","toString","replace","getFragment","fragment","decodeURI","location","pathname","search","match","href","navigate","clearInterval","interval","setInterval","current","some","route","shift","apply","$73a61e65ff779447$export$bb398f9cbb2bdc79","router","JWToken","sessionStorage","getItem","response","fetch","method","headers","body","JSON","stringify","query","resp","json","user","data","$73a61e65ff779447$var$usersData","audits","canvas","verticalLineData","app","document","getElementById","header","createElement","innerHTML","className","append","container","style","marginTop","basicInformationBlock","currLevelElement","transactions","filter","element","type","includes","reduce","prevElement","currentElement","amount","split","reverse","attrs","firstName","lastName","email","login","studentAuditsCont","AuditRatioLb","userAuditRatio","auditR","Math","round","totalUp","totalDown","console","log","color","auditGraphCont","width","$73a61e65ff779447$var$convertBytesToSize","setAttribute","forEach","el","Chart","labels","datasets","backgroundColor","indexAxis","responsive","aspectRatio","plugins","legend","display","tooltip","callbacks","label","context","dataIndex","value","scales","x","beginAtZero","y","position","grid","bar","barThickness","xps","sum","total","studentXpCont","userXPAmount","size","graphCont","$73a61e65ff779447$var$generateXPProgressGraph","XPprogressChart","xpData","map","entity","date","Date","createdAt","xp","task","sort","a","b","toLocaleDateString","fill","borderColor","pointBackgroundColor","maintainAspectRatio","logout","addEventListener","undefined","clear","$18b385bfa5aff1e0$export$fb614e1a95434ae","bytes","sizes","indexOf","floor","convertedValue","parseFloat","pow","toFixed","content","title","form","id","username","name","required","placeholder","password","button","e","preventDefault","cred","btoa","ok","setItem","status","alert","reset","$dad545c909cfec2d$var$router"],"version":3,"file":"index.07ca3c87.js.map"}